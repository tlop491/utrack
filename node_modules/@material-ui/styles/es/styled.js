import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import withStyles from './withStyles'; // styled-components's API removes the mapping between components and styles.
// Using components as a low-level styling construct can be simpler.

function styled(Component) {
  const componentCreator = (style, options) => {
    function StyledComponent(props) {
      const {
        classes,
        className
      } = props,
            other = _objectWithoutProperties(props, ["classes", "className"]);

      return React.createElement(Component, _extends({
        className: classNames(classes.root, className)
      }, other));
    }

    StyledComponent.propTypes = process.env.NODE_ENV !== "production" ? {
      classes: PropTypes.object.isRequired,
      className: PropTypes.string,
      theme: PropTypes.object
    } : {};
    const styles = typeof style === 'function' ? theme => ({
      root: style(theme)
    }) : {
      root: style
    };
    return withStyles(styles, options)(StyledComponent);
  };

  return componentCreator;
}

export default styled;